{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMuVxNxJqtqume6iEPecAcN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Imports and Installations\n"],"metadata":{"id":"vdZGeBi_kzgP"}},{"cell_type":"code","source":["#In case you don't have qiskit, install it now\n","%pip install qiskit --quiet\n","#Installing/upgrading pylatexenc seems to have fixed my mpl issue\n","#If you try this and it doesn't work, try also restarting the runtime/kernel\n","%pip install pylatexenc --quiet"],"metadata":{"id":"9wxAZdUzk20f","executionInfo":{"status":"ok","timestamp":1669930307047,"user_tz":360,"elapsed":35021,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"314c9d26-e46f-476c-a809-415bd8719966"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 4.8 MB 5.0 MB/s \n","\u001b[K     |████████████████████████████████| 19.2 MB 33.5 MB/s \n","\u001b[K     |████████████████████████████████| 240 kB 38.9 MB/s \n","\u001b[K     |████████████████████████████████| 106 kB 23.4 MB/s \n","\u001b[K     |████████████████████████████████| 55 kB 2.1 MB/s \n","\u001b[K     |████████████████████████████████| 49 kB 3.9 MB/s \n","\u001b[K     |████████████████████████████████| 37.5 MB 375 kB/s \n","\u001b[K     |████████████████████████████████| 50 kB 3.1 MB/s \n","\u001b[K     |████████████████████████████████| 929 kB 53.8 MB/s \n","\u001b[K     |████████████████████████████████| 4.0 MB 48.6 MB/s \n","\u001b[K     |████████████████████████████████| 1.9 MB 44.5 MB/s \n","\u001b[K     |████████████████████████████████| 112 kB 54.7 MB/s \n","\u001b[?25h  Building wheel for qiskit (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[K     |████████████████████████████████| 162 kB 5.3 MB/s \n","\u001b[?25h  Building wheel for pylatexenc (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}]},{"cell_type":"code","source":["import qiskit\n","import numpy as np\n","from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister\n","from qiskit import Aer, execute\n","import warnings"],"metadata":{"id":"7F5BqwmklOGf","executionInfo":{"status":"ok","timestamp":1669930307734,"user_tz":360,"elapsed":690,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# multi-qubit Toffoli: applies a flip (NOT gate) to the target if all controls are 1\n","def multiFlip(qc, q_controls, q_target):\n","    # qc is a quantum circuit\n","    # q_controls is the quantum register of the controlling qubits\n","    # q_target is the quantum register of the target qubit\n","    qc.h(q_target)\n","    multiPhase(qc, q_controls+[q_target], np.pi)\n","    qc.h(q_target)\n","\n","# multi-qubit controlled phase: applies a phase factor exp(i*pi*theta) if all the qubits are 1.\n","# Note that it doesn't matter which qubits are the controls and which is the target.\n","def multiPhase(qc, q, theta):\n","    # qc is a quantum circuit\n","    # q is a quantum register in qc\n","    # theta is a float\n","    if len(q) == 1:\n","        qc.u1(theta, q[0])\n","    elif len(q) == 2:\n","        qc.cu1(theta, q[0], q[1])\n","    else:\n","        qc.cu1(theta/2, q[1], q[0])        \n","        multiFlip(qc, q[2:], q[1])\n","        qc.cu1(-theta/2, q[1], q[0])\n","        multiFlip(qc, q[2:], q[1])\n","        multiPhase(qc, [q[0]]+q[2:], theta/2)"],"metadata":{"id":"Hl-tLsvdlPc2","executionInfo":{"status":"ok","timestamp":1669930307735,"user_tz":360,"elapsed":4,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["def qft(qc, q):\n","    \n","    n = len(q)\n","    \n","    for j in range(n-1, -1, -1):\n","        qc.h(q[j])\n","        for k in range(j-1, -1, -1):\n","            qc.cu1(2*np.pi*2**(-(j-k+1)), q[k], q[j])\n","            \n","    for l in range(int(np.floor(n/2))):\n","        qc.swap(q[l], q[n-1-l])"],"metadata":{"id":"A9taUlqflRl2","executionInfo":{"status":"ok","timestamp":1669930307735,"user_tz":360,"elapsed":3,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def iqft(qc, q):\n","    \n","    n = len(q)\n","    \n","    for l in range(int(np.floor(n/2))):\n","        qc.swap(q[l], q[n-1-l])\n","    \n","    for j in range(n):\n","        for k in range(j):\n","            qc.cu1(-2*np.pi*2**(-(j-k+1)), q[k], q[j])\n","        qc.h(q[j])"],"metadata":{"id":"A7U-wwn0lTI-","executionInfo":{"status":"ok","timestamp":1669930307735,"user_tz":360,"elapsed":3,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def makeIntegerCircuit(n, x, m=0, y=None, p=0, z=None, nocbits=False):\n","\n","    # define base quantum and classical registers\n","    q = qiskit.QuantumRegister(n+m+p)\n","    if nocbits:\n","        c = qiskit.ClassicalRegister(1)\n","    else:\n","        c = qiskit.ClassicalRegister(n+m+p)\n","    qc = qiskit.QuantumCircuit(q, c)\n","\n","    # turn base quantum registers into separate lists\n","    if (y is None) and (z is None):\n","        qx = [q[i] for i in range(n)]\n","    elif (z is None):\n","        qy = [q[i] for i in range(m)]\n","        qx = [q[i] for i in range(m,m+n)]\n","    else:\n","        qz = [q[i] for i in range(p)]\n","        qy = [q[i] for i in range(p,p+m)]\n","        qx = [q[i] for i in range(p+m,p+m+n)]\n","\n","    # encode integers into quantum registers\n","    bits = np.binary_repr(x, width=n)\n","    for i in range(n):\n","        if bits[n-1-i] == '1':\n","            qc.x(qx[i])\n","    if y is not None:\n","        bits = np.binary_repr(y, width=m)\n","        for i in range(m):\n","            if bits[m-1-i] == '1':\n","                qc.x(qy[i])\n","    if z is not None:\n","        bits = np.binary_repr(z, width=p)\n","        for i in range(p):\n","            if bits[p-1-i] == '1':\n","                qc.x(qz[i])\n","\n","    # return final circuit and registers\n","    if (y is None) and (z is None):\n","        return qc, c, qx\n","    elif (z is None):\n","        return qc, c, qx, qy\n","    else:\n","        return qc, c, qx, qy, qz"],"metadata":{"id":"KXIoei4NlUoW","executionInfo":{"status":"ok","timestamp":1669930307874,"user_tz":360,"elapsed":142,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def measureCircuit(qc, c, qx, qy=None, qz=None):\n","    \n","    # determine number of qubits in each register\n","    n = len(qx)\n","    if qy is not None:\n","        m = len(qy)\n","    else:\n","        m = 0\n","    if qz is not None:\n","        p = len(qz)\n","    else:\n","        p = 0\n","    \n","    # apply measurement gates\n","    if (qy is None) and (qz is None):\n","        for i in range(n):\n","            qc.measure(qx[i], c[i])\n","    elif (qz is None):\n","        for j in range(m):\n","            qc.measure(qy[j], c[j])\n","        for i in range(n):\n","            qc.measure(qx[i], c[m+i])\n","    else:\n","        for k in range(p):\n","            qc.measure(qz[k], c[k])\n","        for j in range(m):\n","            qc.measure(qy[j], c[p+j])\n","        for i in range(n):\n","            qc.measure(qx[i], c[p+m+i])\n","\n","    # execute quantum circuit\n","    backend = Aer.get_backend('qasm_simulator')\n","    job = execute(qc, backend, shots=1024)\n","    result = job.result()\n","    data = result.get_counts(qc)\n","    \n","    # extract the integer values of the input register, x, and output register, y\n","    out = list(data.keys())[0]\n","    z = 0\n","    for k in range(p):\n","        if out[n+m+p-1-k] == '1':\n","            z += 2**k\n","    y = 0\n","    for j in range(p,p+m):\n","        if out[n+m+p-1-j] == '1':\n","            y += 2**(j-p)\n","    x = 0\n","    for i in range(p+m,p+m+n):\n","        if out[n+m+p-1-i] == '1':\n","            x += 2**(i-m-p)\n","            \n","    if (qy is None) and (qz is None):\n","        return x\n","    elif (qz is None):\n","        return x, y\n","    else:\n","        return x, y, z"],"metadata":{"id":"OYKM85L_lXqv","executionInfo":{"status":"ok","timestamp":1669930307874,"user_tz":360,"elapsed":4,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["# Calculator Functions"],"metadata":{"id":"3FlAOpyKfvZ-"}},{"cell_type":"code","source":["def add(qc, qs_input, qs_output):\n","    \n","    n, m = len(qs_input), len(qs_output)\n","    qft(qc,qs_output)\n","\n","    \n","   \n","    for i in range(n):\n","      for j in range(m-i):\n","        k = m - i - j\n","        qc.cp((2*np.pi)/(2**k), qs_input[i], qs_output[j])\n","   \n","   \n","    iqft(qc,qs_output)\n","\n","  \n","    return qc"],"metadata":{"id":"1wJ58-Affo1L","executionInfo":{"status":"ok","timestamp":1669930307874,"user_tz":360,"elapsed":3,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["def subtract(qc, qs_input, qs_output):\n","    \n","    n, m = len(qs_input), len(qs_output)\n","    qft(qc,qs_output)\n","\n","    \n","   \n","    for i in range(n):\n","      for j in range(m-i):\n","        k = m - i - j\n","        qc.cp((-2*np.pi)/(2**k), qs_input[i], qs_output[j])\n","   \n","   \n","    iqft(qc,qs_output)\n","\n","  \n","    return qc"],"metadata":{"id":"LtJMKphpOXGy","executionInfo":{"status":"ok","timestamp":1669930307875,"user_tz":360,"elapsed":4,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def mult(qc, qx, qy, qa):\n","    # qc is a quantum circuit consisting of three quantum registers: qx, qy, qa\n","    # qx is the input register for the multiplier\n","    # qy is the input register for the multiplicand\n","    # qa is the output register\n","    \n","    # determine number of qubits in each register\n","    n = len(qx)\n","    m = len(qy)\n","    p = len(qa)\n","    \n","    # apply QFT to ancilla register\n","    qft(qc, qa)\n","    \n","    # apply controlled phase gates\n","    for k in range(p):\n","        for j in range(m):\n","            for i in range(n):\n","                if p-k-j-i >= 1:\n","                    multiPhase(qc,[qa[k],qy[j],qx[i]], (2*np.pi)/(2**(p-k-j-i)))\n","    \n","    # apply inverse QFT to ancilla register\n","    iqft(qc, qa)"],"metadata":{"id":"kG1pkl18Hq65","executionInfo":{"status":"ok","timestamp":1669930307875,"user_tz":360,"elapsed":3,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def factor(qc,qx,qy):\n","  n = len(qx)\n","  m = len(qy)\n","  qft(qc,qy)\n","\n","  for i in range(1,n):\n","    qc.cp((2*np.pi)/(2**m),qx[0],qx[i])\n","      \n","\n","  iqft(qc,qy)"],"metadata":{"id":"v76eJMNQBMI_","executionInfo":{"status":"ok","timestamp":1669930307875,"user_tz":360,"elapsed":3,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def findFactor(x,y):\n","  n = int(np.log(x)/np.log(2))\n","  m = int(np.log(y)/np.log(2))\n","\n","  qc, c, qs_input, qs_output = makeIntegerCircuit(n, x, m, y,p=0)\n","\n","  factor(qc, qs_input, qs_output)\n","            \n","  x_out, y_out = measureCircuit(qc,c,qs_input, qs_output)\n","\n","  print(y_out)"],"metadata":{"id":"z8O2e4jGB2sO","executionInfo":{"status":"ok","timestamp":1669930308029,"user_tz":360,"elapsed":4,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["def doAdd():\n","  warnings.filterwarnings('ignore', category=DeprecationWarning)\n"," \n","  \n","  x = int(input(\"Type in a number: \"))\n","  \n","  y = int(input(\"Type in a number: \"))\n","\n","  #converted to binary so that the bit precision is different based on the inputs\n","  xBin = bin(x)\n","  yBin = bin(y)\n","  \n","  xBin = xBin.replace(\"0b\",\"\")\n","  xBin = xBin.replace(\"-\",\"\")\n","\n","  yBin = yBin.replace(\"0b\",\"\")\n","  yBin = yBin.replace(\"-\",\"\")\n","\n","  n = len(xBin) +1\n","  m = len(yBin) +1\n","\n","  if x > y:\n","    qc, c, qs_input, qs_output = makeIntegerCircuit(m, y, n, x,p=0)\n","  else:\n","    qc, c, qs_input, qs_output = makeIntegerCircuit(n, x, m, y,p=0)\n","\n","  add(qc, qs_input, qs_output)\n","            \n","  x_out, y_out = measureCircuit(qc,c,qs_input, qs_output)\n","\n"," # if (x+y) >= 2**m:\n","   # y_out = 2**m + y_out\n","  \n","  print(\"\",x,\" + \",y,\" = \",(y_out))\n","\n","\n","  \n","  "],"metadata":{"id":"XMNPSxoAfp08","executionInfo":{"status":"ok","timestamp":1669930307876,"user_tz":360,"elapsed":4,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["def doSubtract():\n","  warnings.filterwarnings('ignore', category=DeprecationWarning)\n","\n","  y = int(input(\"Type in a number: \"))\n","  \n","  x = int(input(\"Type in a number: \"))\n","\n","  #converted to binary so that the bit precision is different based on the inputs\n","  xBin = bin(x)\n","  yBin = bin(y)\n","  \n","  xBin = xBin.replace(\"0b\",\"\")\n","  xBin = xBin.replace(\"-\",\"\")\n","\n","  yBin = yBin.replace(\"0b\",\"\")\n","  yBin = yBin.replace(\"-\",\"\")\n","\n","  n = len(xBin) + 1\n","  m = len(yBin) + 1\n","\n","\n","  if y < x:\n","    qc, c, qs_input, qs_output = makeIntegerCircuit(m, y, n, x,p=0)\n","\n","    subtract(qc, qs_input, qs_output)\n","              \n","    x_out, y_out = measureCircuit(qc,c,qs_input, qs_output)\n","\n","    y_out *= -1\n","  \n","  else:\n","    qc, c, qs_input, qs_output = makeIntegerCircuit(n, x, m, y,p=0)\n","\n","    subtract(qc, qs_input, qs_output)\n","              \n","    x_out, y_out = measureCircuit(qc,c,qs_input, qs_output)\n","\n","  print(y,\" - \",x,\" = \",(y_out))"],"metadata":{"id":"aSW91uXgOcrD","executionInfo":{"status":"ok","timestamp":1669930308028,"user_tz":360,"elapsed":6,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["def doMult():\n","  warnings.filterwarnings('ignore', category=DeprecationWarning)\n","  x = int(input(\"Type in a number: \"))\n","  y = int(input(\"Type in a number: \"))\n","\n","  a = 0\n","  p = int(np.floor(np.log2(1+(2**x-1)*(2**y-1))))\n","  \n","  \n","  # apply the algorithm\n","  qc, c, qx, qy, qz = makeIntegerCircuit(x, x, y, y, p, a)\n","  mult(qc, qx, qy, qz)\n","  x_out, y_out, z_out = measureCircuit(qc, c, qx, qy, qz)\n","  \n","  # should be the same\n","  print(x,\" * \",y,\" = \",z_out)"],"metadata":{"id":"IcdKtkeRgnST","executionInfo":{"status":"ok","timestamp":1669932149749,"user_tz":360,"elapsed":151,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["def doDiv():\n","  warnings.filterwarnings('ignore', category=DeprecationWarning) \n","  x = int(input(\"Type in a number: \"))\n","  y = int(input(\"Type in a number: \"))\n","\n","  #converted to binary so that the bit precision is different based on the inputs\n","  xBin = bin(x)\n","  yBin = bin(y)\n","  \n","  xBin = xBin.replace(\"0b\",\"\")\n","  xBin = xBin.replace(\"-\",\"\")\n","\n","  yBin = yBin.replace(\"0b\",\"\")\n","  yBin = yBin.replace(\"-\",\"\")\n","\n","  n = len(xBin) +1\n","  m = len(yBin) +1\n","  temp = 0\n","  count = 0\n","  \n","  # apply the algorithm\n","  while temp < x:\n","    qc, c, qs_input, qs_output = makeIntegerCircuit(m, temp, m, y,p=0)\n","\n","    add(qc, qs_input, qs_output)\n","              \n","    x_out, y_out = measureCircuit(qc,c,qs_input, qs_output)\n","    \n","    temp = y_out\n","    count += 1\n","    \n","\n","  # should be the same\n","  print(x,\" / \",y,\" = \",count)"],"metadata":{"id":"EORiYNlLE764","executionInfo":{"status":"ok","timestamp":1669930308029,"user_tz":360,"elapsed":4,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["def Calculator():\n","  choices = {1:[\"doAdd()\",\"Addition\"],2:[\"doSubtract()\",\"Subtraction\"],3:[\"doMult()\",\"Multiplication\"],4:[\"doDiv()\",\"Division\"]}\n","  choice = \"\"\n","  print(\"QUANTUM CALCULATOR\")\n","  print(\"Below are your options:\")\n","  print(\"1) Addition\\n2) Subtraction\\n3) Multiplication\\n4) Division\\n\")\n","  \n","  choice = (input(\"Input the option number for the calculator or input 'stop' to end the program: \\n\"))\n","  while choice != \"stop\":\n","    print(choices[int(choice)][1],\"\\n\")\n","    eval(choices[int(choice)][0])\n","    choice = (input(\"Input the option number for the calculator or input 'stop' to end the program: \\n\"))\n","\n"],"metadata":{"id":"8oNT9GU9I-0o","executionInfo":{"status":"ok","timestamp":1669930308029,"user_tz":360,"elapsed":4,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["# Calculator\n"],"metadata":{"id":"AWbFYoHoGHGt"}},{"cell_type":"code","source":["Calculator()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vR0fe_JIJl-B","executionInfo":{"status":"ok","timestamp":1669933918383,"user_tz":360,"elapsed":106535,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}},"outputId":"8aae4954-3501-4490-f814-8591c2d13db1"},"execution_count":28,"outputs":[{"name":"stdout","output_type":"stream","text":["QUANTUM CALCULATOR\n","Below are your options:\n","1) Addition\n","2) Subtraction\n","3) Multiplication\n","4) Division\n","\n","Input the option number for the calculator or input 'stop' to end the program: \n","1\n","Addition \n","\n","Type in a number: 3\n","Type in a number: 5\n"," 3  +  5  =  8\n","Input the option number for the calculator or input 'stop' to end the program: \n","3\n","Multiplication \n","\n","Type in a number: 3\n","Type in a number: 5\n","3  *  5  =  15\n","Input the option number for the calculator or input 'stop' to end the program: \n","2\n","Subtraction \n","\n","Type in a number: 3\n","Type in a number: 5\n","3  -  5  =  -2\n","Input the option number for the calculator or input 'stop' to end the program: \n","4\n","Division \n","\n","Type in a number: 3\n","Type in a number: 5\n","3  /  5  =  1\n","Input the option number for the calculator or input 'stop' to end the program: \n","stop\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"96QW92TSD6Lh","executionInfo":{"status":"ok","timestamp":1669932133505,"user_tz":360,"elapsed":4,"user":{"displayName":"Pratham S Gujar","userId":"07840881343389459442"}}},"execution_count":18,"outputs":[]}]}